import{_ as e,c as i,o as s,a2 as t}from"./chunks/framework.BirGTBos.js";const g=JSON.parse('{"title":"配置索引","description":"","frontmatter":{},"headers":[],"relativePath":"docs/unitTest/vitest/configIndex.md","filePath":"docs/unitTest/vitest/configIndex.md"}'),a={name:"docs/unitTest/vitest/configIndex.md"},n=t(`<h1 id="配置索引" tabindex="-1">配置索引 <a class="header-anchor" href="#配置索引" aria-label="Permalink to &quot;配置索引&quot;">​</a></h1><h2 id="配置" tabindex="-1"><a href="https://cn.vitest.dev/config/#%E9%85%8D%E7%BD%AE" target="_blank" rel="noreferrer">配置</a> <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;[配置](https://cn.vitest.dev/config/#%E9%85%8D%E7%BD%AE)&quot;">​</a></h2><p><code>vitest</code> 将读取你的项目根目录的 <code>vite.config.ts</code> 文件以匹配插件并设置为你的 Vite 应用。如果想使用不同的配置进行测试，你可以：</p><p>创建 <code>vitest.config.ts</code>，优先级更高。 将 <code>--config</code> 选项传递给 CLI，例如 <code>vitest --config ./path/to/vitest.config.ts</code> 。 在 <code>defineConfig</code> 中使用 <code>process.env.VITEST</code> 或 <code>mode</code> 属性（默认值是 <code>test</code>）在 <code>vite.config.ts</code> 中有条件的应用不同的配置。 要配置 <code>vitest</code> 本身，请在你的 Vite 配置中添加 <code>test</code> 属性。如果你使用 <code>vite</code> 的 <code>defineConfig</code> 你还需要将 三斜线指令 写在配置文件的顶部。</p><p>使用 <code>vite</code> 的 <code>defineConfig</code> 可以参考下面的格式：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vitest&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... Specify options here.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="配置选项-查看-vitest-的配置" tabindex="-1"><a href="https://cn.vitest.dev/config/#%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9" target="_blank" rel="noreferrer">配置选项</a> 查看 vitest 的配置 <a class="header-anchor" href="#配置选项-查看-vitest-的配置" aria-label="Permalink to &quot;[配置选项](https://cn.vitest.dev/config/#%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9) 查看 vitest 的配置&quot;">​</a></h2><h3 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h3><ul><li>类型： <code>string[]</code></li><li>默认值： <code>[&#39;**/*.{test,spec}.?(c|m)[jt]s?(x)&#39;]</code></li></ul><p>匹配包含测试文件的 glob 规则。</p><h3 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h3><ul><li>类型： <code>string[]</code></li><li>默认值： <code>[&#39;**/node_modules/**&#39;, &#39;**/dist/**&#39;, &#39;**/cypress/**&#39;, &#39;**/.{idea,git,cache,output,temp}/**&#39;, &#39;**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build}.config.*&#39;]</code></li></ul><p>匹配排除测试文件的 glob 规则。</p><h3 id="includesource" tabindex="-1">includeSource <a class="header-anchor" href="#includesource" aria-label="Permalink to &quot;includeSource&quot;">​</a></h3><ul><li>类型： <code>string[]</code></li><li>默认值： <code>[]</code></li></ul><p>包括源代码中的测试文件的通配符。</p><p>当定义时，Vitest 将运行所有包含 import.meta.vitest 的匹配文件。</p><h3 id="environment" tabindex="-1">environment <a class="header-anchor" href="#environment" aria-label="Permalink to &quot;environment&quot;">​</a></h3><ul><li>类型： <code>&#39;node&#39; | &#39;jsdom&#39; | &#39;happy-dom&#39; | &#39;edge-runtime&#39; | string</code></li><li>默认值： <code>node</code></li><li>命令行终端: <code>--environment=&lt;env&gt;</code></li></ul><p>Vitest 中的默认测试环境是一个 Node.js 环境。如果你正在构建 Web 端应用，你可以使用 <code>jsdom</code> 或 <code>happy-dom</code> 这种类似浏览器(browser-like)的环境来替代 Node.js。 如果你正在构建边缘计算函数，你可以使用 <code>edge-runtime</code> 环境</p>`,20),o=[n];function d(c,l,r,h,p,k){return s(),i("div",null,o)}const f=e(a,[["render",d]]);export{g as __pageData,f as default};
